"""
Django settings for hh project.

Generated by 'django-admin startproject' using Django 1.11.29.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import logging
from os import path
import sys

import upsilonconf

from django.urls import reverse_lazy

# Build paths inside the project like this: path.join(BASE_DIR, ...)
BASE_DIR = path.dirname(path.dirname(path.abspath(__file__)))

# Add the apps directory to the path since all code lives under there
sys.path.append(path.join(BASE_DIR, 'apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

config = upsilonconf.load('.env.json')['Settings']

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.secret_key

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.get('debug', default=False)

ALLOWED_HOSTS = config.allowed_hosts

SITE_URL = config.site_url


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 3rd Party Apps
    'django_crontab',
    'django_mailbox',
    'django_recaptcha',         # https://www.google.com/recaptcha/admin/create
    'easy_pdf',
    'fullurl',
    'phonenumber_field',
    'tinymce',

    # Apps
    'authentication',
    'bow_hunt',
    'contact',
    'crontab',
    'gallery',
    'history',
    'library',
    'mailing_lists',
    'news',
    'residents',
    'staff'
]

MIDDLEWARE = [
    # 3rd party middleware that needs to come before others
    'corsheaders.middleware.CorsMiddleware',

    # Django middleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hh.urls'

TEMPLATES = [
    {
        'APP_DIRS': True,
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [path.normpath(path.join(BASE_DIR, 'templates'))],
        'OPTIONS': {
            'context_processors': [
                # Django context processors
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # 3rd Party processors
                'django_settings_export.settings_export'
            ],
        },
    },
]

WSGI_APPLICATION = 'hh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config.db_name,
        'USER': config.db_user,
        'PASSWORD': config.db_password,
        'HOST': config.db_host,
        'OPTIONS': {
            'init_command': 'SET sql_mode="STRICT_ALL_TABLES"'
        },
        'STORAGE_ENGINE': 'INNODB'
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 8}
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_ROOT = path.abspath(path.join(BASE_DIR, 'static'))
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    path.abspath(path.join(BASE_DIR, 'public'))
]

# noinspection PyUnresolvedReferences
MEDIA_ROOT = path.abspath(path.join(BASE_DIR, 'media'))
MEDIA_URL = '/media/'


# Login information

LOGIN_REDIRECT_URL = reverse_lazy('redirect')


# CORS setup

CORS_ALLOW_METHODS = [
    'GET'
]

CORS_ORIGIN_WHITELIST = [
    'http://www.huntingtonhillsinc.org'
]


# Email setup

DEFAULT_FROM_EMAIL = 'adamstein0@gmail.com'
EMAIL_BACKEND = config.email_backend

if 'filebased' in EMAIL_BACKEND:
    # Local development
    EMAIL_FILE_PATH = config.email_file_path
else:
    EMAIL_HOST = config.email_host
    EMAIL_HOST_PASSWORD = config.email_host_password
    EMAIL_HOST_USER = config.email_host_user
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True


# Allow for large number of fields to upload when adding logs

DATA_UPLOAD_MAX_NUMBER_FIELDS = 2000

# Set up to run cron jobs

RUN_CRON_JOBS = config.run_cron_jobs

# Recaptcha related stuff

config = upsilonconf.load('.env.json')['Recaptcha']

recaptcha_private_key = config.get('recaptcha_private_key', None)
recaptcha_public_key = config.get('recaptcha_public_key', None)

if recaptcha_private_key and recaptcha_public_key:
    RECAPTCHA_PRIVATE_KEY = recaptcha_private_key
    RECAPTCHA_PUBLIC_KEY = recaptcha_public_key

if config.get('silence_recaptcha_test_key_error', default=False):
    # The Google test keys used for local use are causing a warning message
    SILENCED_SYSTEM_CHECKS = ['django_recaptcha.recaptcha_test_key_error']



# Version information

VERSION = '3.2'


# List of settings to export to templates (django-settings-export)

SETTINGS_EXPORT = [
    'DEBUG',
    'VERSION'
]


# Production vs Development specific stuff

if DEBUG:
    INSTALLED_APPS.append('django_extensions')

    if 'test' in sys.argv or 'test_coverage' in sys.argv:
        from library.testing.migrations import DisableMigrations

        # Turn off normal log messages (just leave CRITICAL in case it's something terrible)
        logging.disable(logging.CRITICAL)

        DEBUG = False
        TESTING = True

        # No reason to go through migrations for the test database. If we are testing, we should have our models the way we
        # want.
        MIGRATION_MODULES = DisableMigrations()

        # Speed up unit tests by avoiding password hashing
        PASSWORD_HASHERS = ['django_plainpasswordhasher.PlainPasswordHasher']

        # No reason to compress CSS/JS files
        COMPRESS_ENABLED = False

        # Use SQLite3 databases for testing instead of MySQL because:
        #
        #   o faster to start, faster to run, no cleanup needed
        #   o multiple tests can run at the same time
        #   o no need to 'destroy' the test database when starting a new test if the previous test
        #     stopped before cleaning up
        DATABASES["default"] = {'ENGINE': 'django.db.backends.sqlite3', 'NAME': '/tmp/default.db'}
else:
    # Logging handlers

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '[%(levelname)s] [%(threadName)s/%(name)s:%(funcName)s:%(lineno)d] %(message)s'
            },
            'simple_date': {
                'format': '[%(asctime)s] [%(levelname)s] [%(threadName)s/%(name)s:%(funcName)s:%(lineno)d] %(message)s'
            }
        },
        'handlers': {
            'cronjob': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple_date'
            },
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': upsilonconf.load('.env.json')['Settings'].django_log_file
            },
            'null': {
                'level': 'DEBUG',
                'class': 'logging.NullHandler'
            },
        },
        'loggers': {
            'crontab': {
                'handlers': ['cronjob'],
                'level': 'DEBUG',
                'propagate': False
            },
            'django_crontab': {
                'handlers': ['null'],
                'level': 'INFO',
            },
            'django.request': {
                'handlers': ['file'],
                'level': 'WARNING',
                'propagate': True
            },
            'mailing_lists': {
                'handlers': ['file'],
                'level': 'DEBUG',
                'propagate': False
            }
        },
    }

from .crontab import *
