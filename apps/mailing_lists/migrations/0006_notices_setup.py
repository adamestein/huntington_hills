# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2024-12-20 14:18
from __future__ import unicode_literals

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations

import upsilonconf

DOMAIN = 'huntingtonhillsinc.website'
EMAIL = 'notices'
ML_NAME = 'Notices'


# noinspection PyUnusedLocal
def backwards_func(apps, schema_editor):
    mailbox = apps.get_model('django_mailbox', 'Mailbox').objects.get(name=ML_NAME)
    apps.get_model('mailing_lists', 'MailingList').objects.get(mailbox=mailbox).delete()
    mailbox.delete()


# noinspection PyUnusedLocal
def forwards_func(apps, schema_editor):
    board_model = apps.get_model('residents', 'Board')
    django_mailbox_model = apps.get_model('django_mailbox', 'Mailbox')
    email_model = apps.get_model('residents', 'Email')
    mailing_list_model = apps.get_model('mailing_lists', 'MailingList')
    person_model = apps.get_model('residents', 'Person')

    bounce_email = f'{EMAIL}-bounces@{DOMAIN}'
    config = upsilonconf.load('.env.json')['Mailing Lists']
    email = f'{EMAIL}@{DOMAIN}'

    mailbox = django_mailbox_model.objects.create(
        name=ML_NAME,
        uri=f'pop3+ssl://{email}:{config["credentials"][ML_NAME].password}@{config.host}:995'
    )

    ml = mailing_list_model.objects.create(
        email=email,
        mailbox=mailbox
    )

    member_emails = [
        'adam@csh.rit.edu',
        'alancooper11@icloud.com',
        'alisonmatich@gmail.com',
        'andhall@bluefrog.com',
        'anne@seabreeze.com',
        'anor013@gmail.com',
        'antoniaorlando@hotmail.com',
        'bcrane263@gmail.com',
        'Becky.Lyons@wegmans.com',
        'blockemiller@gmail.com',
        'brankomatich@gmail.com',
        'burton671@aol.com',
        'cburritt@esm.rochester.edu',
        'cchungbin@gmail.com',
        'cdnpaints@gmail.com',
        'colombo@lawyer.com',
        'coreysapp@outlook.com',
        'dennis.kennelly@tylin.com',
        'dlepel@yahoo.com',
        'dlfauth2001@yahoo.com',
        'dmeckert379@gmail.com',
        'domnika@msn.com',
        'dsehlin@aol.com',
        'dtbecker2@mac.com',
        'ed@numzaan.com',
        'gal60zz16@gmail.com',
        'ghorwitz919@gmail.com',
        'hampars@aol.com',
        'hbernard@rochester.rr.com',
        'hilmar@frontier.com',
        'Jared.Mooberry@gmail.com',
        'jaykay628@gmail.com',
        'jcf@mflumber.com',
        'jend@rochester.rr.com',
        'jestill1946@gmail.com',
        'jnorris4600@gmail.com',
        'k2porterhutton@gmail.com',
        'kennellyteresa4@gmail.com',
        'kkasanu@hotmail.com',
        'KTestates55@gmail.com',
        'larrymerrillphoto@gmail.com',
        'LBgraham155@aol.com',
        'linda.stevens1956@yahoo.com',
        'Lisa_DeLouise@urmc.rochester.edu',
        'mahin_maines@urmc.rochester.edu',
        'malitz1967@gmail.com',
        'mburritt@esm.rochester.edu',
        'mcherry001@hotmail.com',
        'mdcurtin@gmail.com',
        'nnorton50@yahoo.com',
        'oliviadioguardi@gmail.com',
        'pelicansnest@yahoo.com',
        'peterniemi@yahoo.com',
        'pinkyagogo88@aol.com',
        'pntathome@yahoo.com',
        'prichardfauth@yahoo.com',
        'raott1829@gmail.com',
        'richoxley@yahoo.com',
        'sagreive@yahoo.com',
        'seruggeri@msn.com',
        'skeaton@keaton-media.com',
        'starzz226@yahoo.com',
        'sus.kram1@gmail.com',
        'Susan.Baechle@gmail.com',
        'susaniannaccone@gmail.com',
        'swilde@rochester.rr.com',
        'tamaragrossman@yahoo.com',
        'thoshill51@icloud.com',
        'waynescheuing@gmail.com',
        'wendellkibler@gmail.com',
        'wpgcare@gmail.com',
        'zunijlk@rochester.rr.com'
    ]

    for member_email in member_emails:
        try:
            email_obj = email_model.objects.get(email=member_email)
        except ObjectDoesNotExist:
            # Can't find email in system, so don't add the person
            pass
        else:
            ml.members.add(email_obj)
            if member_email == 'adam@csh.rit.edu':
                ml.can_post.add(email_obj)

    board = board_model.objects.all()[0]
    positions = ['director_at_large_1', 'director_at_large_2', 'president', 'secretary', 'treasurer', 'vice_president']
    for position in positions:
        person = getattr(board, position)
        for email in person.emails.all():
            ml.can_post.add(email)

    print(f'''

Remember to create 2 emails (if not already done so):

    1) {email}, which is just a regular mailbox AND
    2) {bounce_email}, which is forwarded to the postmaster
''')


class Migration(migrations.Migration):

    dependencies = [
        ('mailing_lists', '0005_center_setup'),
    ]

    operations = [
        migrations.RunPython(forwards_func, backwards_func)
    ]
